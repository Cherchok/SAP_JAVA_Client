
package client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.7-b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WebData", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WebData {


    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "clear", targetNamespace = "http://ws/", className = "client.Clear")
    @ResponseWrapper(localName = "clearResponse", targetNamespace = "http://ws/", className = "client.ClearResponse")
    @Action(input = "http://ws/WebData/clearRequest", output = "http://ws/WebData/clearResponse")
    public void clear();

    /**
     * 
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getQuan", targetNamespace = "http://ws/", className = "client.GetQuan")
    @ResponseWrapper(localName = "getQuanResponse", targetNamespace = "http://ws/", className = "client.GetQuanResponse")
    @Action(input = "http://ws/WebData/getQuanRequest", output = "http://ws/WebData/getQuanResponse")
    public int getQuan();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getColumnLeng", targetNamespace = "http://ws/", className = "client.GetColumnLeng")
    @ResponseWrapper(localName = "getColumnLengResponse", targetNamespace = "http://ws/", className = "client.GetColumnLengResponse")
    @Action(input = "http://ws/WebData/getColumnLengRequest", output = "http://ws/WebData/getColumnLengResponse")
    public List<String> getColumnLeng();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFieldName", targetNamespace = "http://ws/", className = "client.GetFieldName")
    @ResponseWrapper(localName = "getFieldNameResponse", targetNamespace = "http://ws/", className = "client.GetFieldNameResponse")
    @Action(input = "http://ws/WebData/getFieldNameRequest", output = "http://ws/WebData/getFieldNameResponse")
    public List<String> getFieldName();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDataType", targetNamespace = "http://ws/", className = "client.GetDataType")
    @ResponseWrapper(localName = "getDataTypeResponse", targetNamespace = "http://ws/", className = "client.GetDataTypeResponse")
    @Action(input = "http://ws/WebData/getDataTypeRequest", output = "http://ws/WebData/getDataTypeResponse")
    public List<String> getDataType();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRepText", targetNamespace = "http://ws/", className = "client.GetRepText")
    @ResponseWrapper(localName = "getRepTextResponse", targetNamespace = "http://ws/", className = "client.GetRepTextResponse")
    @Action(input = "http://ws/WebData/getRepTextRequest", output = "http://ws/WebData/getRepTextResponse")
    public List<String> getRepText();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDomName", targetNamespace = "http://ws/", className = "client.GetDomName")
    @ResponseWrapper(localName = "getDomNameResponse", targetNamespace = "http://ws/", className = "client.GetDomNameResponse")
    @Action(input = "http://ws/WebData/getDomNameRequest", output = "http://ws/WebData/getDomNameResponse")
    public List<String> getDomName();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOutputLen", targetNamespace = "http://ws/", className = "client.GetOutputLen")
    @ResponseWrapper(localName = "getOutputLenResponse", targetNamespace = "http://ws/", className = "client.GetOutputLenResponse")
    @Action(input = "http://ws/WebData/getOutputLenRequest", output = "http://ws/WebData/getOutputLenResponse")
    public List<String> getOutputLen();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDecimals", targetNamespace = "http://ws/", className = "client.GetDecimals")
    @ResponseWrapper(localName = "getDecimalsResponse", targetNamespace = "http://ws/", className = "client.GetDecimalsResponse")
    @Action(input = "http://ws/WebData/getDecimalsRequest", output = "http://ws/WebData/getDecimalsResponse")
    public List<String> getDecimals();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     * @return
     *     returns client.MyHash
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWebMapa", targetNamespace = "http://ws/", className = "client.GetWebMapa")
    @ResponseWrapper(localName = "getWebMapaResponse", targetNamespace = "http://ws/", className = "client.GetWebMapaResponse")
    @Action(input = "http://ws/WebData/getWebMapaRequest", output = "http://ws/WebData/getWebMapaResponse")
    public MyHash getWebMapa(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        String arg6);

}
